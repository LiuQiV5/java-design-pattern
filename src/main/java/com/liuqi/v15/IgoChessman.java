package com.liuqi.v15;

/**
 * 设计模式之享元模式
 * 当一个软件系统在运行时产生的对象数量太多，将导致运行代价过高，带来系统性能下降等问题。
 * 例如在一个文本字符串中存在很多重复的字符，如果每一个字符都用一个单独的对象来表示，将会占用较多的内存空间，
 * 那么我们如何去避免系统中出现大量相同或相似的对象，同时又不影响客户端程序通过面向对象的方式对这些对象进行操作？
 * 享元模式正为解决这一类问题而诞生。享元模式通过共享技术实现相同或相似对象的重用，在逻辑上每一个出现的字符都有一个对象与之对应，
 * 然而在物理上它们却共享同一个享元对象，这个对象可以出现在一个字符串的不同地方，相同的字符对象都指向同一个实例，在享元模式中，
 * 存储这些共享实例对象的地方称为享元池
 * -------------------------------------------------------
 * 围棋棋子类：抽象享元类
 */
public abstract class IgoChessman {

    public abstract String getColor();

    public void display(Coordinates coord) {
        System.out.println("棋子颜色：" + this.getColor() + "，棋子位置：" + coord.getX() + "，" + coord.getY() );
    }
}
